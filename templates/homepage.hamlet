<nav .navbar .navbar-default>
    <div .container>
        <!--<div .navbar-header>-->
        <div #navbar>
            <ul .nav .navbar-nav>
                <li>
                    <a href=@{TicTacToeR}>TicTacToe
                <li>
                    <a href=@{Connect3R}>Connect 3
                <li>
                    <a href=@{SudokuR}>Sudoku
                <li>
                    <a href=@{NQueensR}>N-Queens
<h1.jumbotron>Modelling Sequential Games using the Selection Monad
<div .row>
    <h2>Description
    <div .col-xs-12>
        <p>
            <h4>The Selection Monad:
            <code #selection-monad>
                type J r x = (x -> r) -> x
        <p>
            This site hosts a series of prototypes demonstrating the selection
            monad's ability to solve sequential games while exhibiting the
            feasibility of relying on this algorithm to determine optimal moves
            in real-time. This monad is fashioned as an AI controlled opponent
            the player can play against. The computation provides a generic
            interface for defining information-complete, turn-based games and
            singleplayer puzzles, requiring that the user specify three
            features about that particular game:
            <ul>
                <li>The pool of all the possible moves that can be chosen by #
                    \either player
                <li>A predicate that articulates the win conditions
                <li>The maximum number of turns that can occur during play
        <p>
            The complexity of the puzzle (the number of moves available, the
            number of turns and the computation time of determining victory)
            affects the algorithm's speed exponentially, thus only
            simplified puzzles are demonstrated here. If the server takes too
            long to offer an optimal move, one is chosen at random.
<div .row>
    <h2>Implementation
    <div .col-xs-12>
        <p>
            The original works that produced this computation provided it in
            Haskell, utilizing it's laziness and infinite lists to
            define structures that benefit from partial evaluation.
            Further examination has revealed that the algorithm supports
            parallel computations of multiple possible outcomes
            (another facility greatly simplified by Haskell). #
             Communication between the site and the game logic is handled by
             Yesod.
        <p>
            Additionally, the competitive games are accompanied with an online
            multiplayer/chat option, if the AI proves disatisfactory.
        <p>
            The logic for the #
            <a href=https://github.com/phtb233/solvable-games>games, the monad,#
            \ and #
            <a href=https://github.com/phtb233/sequential-games>this site
            \ are available on Github.
<footer .sticky-footer>
    <p>Copyright &copy; 2016 Stephen Oppong Beduh

