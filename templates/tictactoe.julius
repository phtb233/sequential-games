    var cells = [], $puzzle, X = "X", O = "O", whoseTurn, $whoseTurn, 
    moves = [], turnSwitch, init, getOptimalPlay, checkWin, reset,
    noughtOrCross, playerScore, opponentScore, $playerScore, 
    $opponentScore, addPoint, onError, multiplayer, $cover, showMessageBox,
    $puzzle_main, $messageBox, otherPlayer, game;

    game = "tictactoe";
    multiplayer = false;
    checkWin = function(player){
        // Check for a match of 3.
        fb = cells.map(function(c){ return c.filledBy; });
        return fb[0] === player && fb[1] === player && fb[2] === player ||
               fb[3] === player && fb[4] === player && fb[5] === player ||
               fb[6] === player && fb[7] === player && fb[8] === player ||
               fb[0] === player && fb[3] === player && fb[6] === player ||
               fb[1] === player && fb[4] === player && fb[7] === player ||
               fb[2] === player && fb[5] === player && fb[8] === player ||
               fb[2] === player && fb[4] === player && fb[6] === player ||
               fb[0] === player && fb[4] === player && fb[8] === player;
    };

    init = function(){
        playerScore = opponentScore = 0;
        $puzzle_main = $("#puzzle-main");
        $playerScore = $("#player-1-info .score");
        $opponentScore = $("#player-2-info .score");
        $puzzle = $("#puzzle");
        $whoseTurn = $("#whoseTurn");
        $puzzle.find(".cell").each(function(index){
            cell = { 
                "filledBy" : "",
                "jq" : $(this)
            };
            cells.push(cell);
            });
        $puzzle.bind("click", puzzleClickHandler);
        // X takes the first turn.
        turnSwitch(X);
    };

    reset = function(startingPlayer){
        // Clear the board for the next match, and alternate the first player.
            $puzzle.unbind("click", puzzleClickHandler);
            cells.forEach(function(cell){ 
                cell.filledBy = "";
                cell.jq.empty();
            });
            moves = [];
            turnSwitch(startingPlayer);
    };

    addPoint = function(player){
        // Add a point to this player's scoreboard, and update HUD.
        if(player === X){
            playerScore++;
            $playerScore.text(playerScore);
        } else {
            opponentScore++;
            $opponentScore.text(opponentScore);
        }
    };

    puzzleClickHandler = function(e) {
        var $thisCell, $thisRow, rowIndex, cellIndex, actualIndex, cell;
        // Here, we listen for events through the parent for easy add/removal.
        $thisCell = $(e.target);  // Get the child this event triggered on. 
        $thisRow = $(e.target).parent(); // Get the row this cell's inside. 
        rowIndex = $thisRow.index() * 3;
        cellIndex = $thisCell.index();
        actualIndex = rowIndex + cellIndex; 

        // Find the corresponding cell in our list of cell objects.
        cell = cells.find(function(c, i){
            return i === actualIndex;
        });
        if(cell.filledBy === ""){ // If this cell hasn't been filled in... 
            if(whoseTurn !== X) // But it's not X's turn, throw exception.
                throw Error("It's O's turn, but click still registered");
            else {
                takeTurn(X, actualIndex); // Otherwise, fill this cell. 
            }
        }
        // Don't highlight text when double clicking.
        return false;
    };

    takeTurn = function(player, move){
        if(whoseTurn !== player)
            throw Error("Turn taken by the wrong player.");
        var cell = cells[move];
        var $cell = cell.jq;
        var op = otherPlayer(player);
        if(cell.filledBy !== "") throw Error ("Move already taken.");
        cell.filledBy = player;
        var $symbol = $("<div>").addClass(noughtOrCross(player));
        $cell.append($symbol);
        $symbol.width("75%").height("75%").css("margin", "14.5%");
        moves.push(move);
        // If you just played your move...
        if(multiplayer && player === X){
            // Send this move to the server.
            $(document).trigger("sendMove", [move]);
        }
        if(checkWin(player)){
            // Update scores.
            addPoint(player);
            showMessageBox("win", player);
            return;
        }
        if(moves.length >= 9){
            showMessageBox("draw", player);
        } else {
            turnSwitch(op);
        }
    };

    noughtOrCross = function(player){
        return player === X ? "cross" : "nought";
    };

    turnSwitch = function(player){
        switch (player){
        case X: whoseTurn = X; 
            $whoseTurn.text("It's your turn.");
            $puzzle.bind("click", puzzleClickHandler);
            break;
        case O: whoseTurn = O; 
            $whoseTurn.text("It's your opponent's turn.");
            $puzzle.unbind("click", puzzleClickHandler);
            if(multiplayer){
                // Wait for server sent event response
            } else {
                // Use computer AI.
                getOptimalPlay();
            }
            break;
        default: throw Error("whoseTurn is undefined");
        }
    };

    onError = function(){
        // Pick a random, unchosen move.
        var allMoves = [0,1,2,3,4,5,6,7,8];
        var possible = allMoves.filter(function(e, i, a){
            return moves.indexOf(e) === -1;
        });
        var randomIndex = Math.floor(Math.random() * (possible.length)); 
        takeTurn(O, possible[randomIndex]);
    };

    showMessageBox = function(drawOrWin, player){
        var $message, $button, wonOrLost;
        $puzzle.unbind("click", puzzleClickHandler);
        $cover = $("<div id=\"cover\">");
        $cover.css("opacity", 0.7);
        $messageBox = $("<div id=\"messageBox\">");
        $container = $("<div>");
        $message = $("<p>");
        wonOrLost = player === X ? "won" : "lost";
        if(drawOrWin === "draw"){
            $message.text("It's a draw.");
        } else if (drawOrWin === "win"){
            if(!player) throw Error("showMessageBox: winning player " +
                        "was not specified.");
            $message.text("You have " + wonOrLost + " the game.");
        } else {
            throw Error("showMessageBox: wrong arguments.");
        }
        $button = $("<button>");
        $button.text("OK");
        $button.on("click", function(e){
            $cover.remove();
            $messageBox.remove();
            reset(otherPlayer(player));
        });
        setTimeout(function(){
            $puzzle_main.append($cover);
            $puzzle_main.append($messageBox);
            $messageBox.append($container);
            $container.append($message);
            $container.append($button);
        }, 2000);
    };

    otherPlayer = function(player){
        return player === X ? O : X;
    };

    getOptimalPlay = function(){
        jQuery.ajax({
                type: "POST",
                url: "@{TicTacToeR}",
                data: JSON.stringify(moves),
                dataType: "json",
                contentType: "application/json",
                success: function(data){
                    takeTurn(O, data);
                },
                timeout : 10000,
                error : onError
        });
    };

    init();
