(function($){
        var $puzzle, $puzzle_main, cells = [], $cells, init, $another_puzzle,
        $solve_puzzle, $check_answers, populateGrid, receivePuzzle, 
        allPuzzles = [], playedPuzzles = [], currentPuzzle = [], 
        getRandomPuzzle, onClickAnotherPuzzle, onClickSolvePuzzle,
        onClickCheckAnswers, $message, checkAnswers, startPuzzleResetTimer,
        puzzleResetTimeout, waitForNextPuzzle, startNextPuzzle, $fields, 
        onSolutionReceived, deactivateControls, activateControls;

        init = function(){
            $puzzle = $("#puzzle");
            $puzzle_main = $("#puzzle-main");
            $cells = $(".cell");
            $fields = $cells.find("input");
            $another_puzzle = $("#another-puzzle");
            $solve_puzzle = $("#solve-puzzle");
            $check_answers = $("#check-answers");
            $message = $("#message");
            getPuzzles();
        };

        // Request all the puzzles from the server.
        getPuzzles = function(){
            $.ajax({
                    type : "POST",
                    url  : "@{GetSudokuPuzzleR}",
                    success : onPuzzlesReceived,
                    error : function(){
                        $message.text("A serious error was encountered. " + 
                        "Please reload.");
                    }
            });
        };

        // Store the retrieved puzzles. Populate the grid with initial clues.
        onPuzzlesReceived = function(data){
            allPuzzles = data;
            getRandomPuzzle();
            populateGrid(currentPuzzle);
            // Register click events.
            activateControls(null);
        };

        getRandomPuzzle = function(){
            var index;
            if(allPuzzles.length === 0){
                // If all puzzles have been consumed, refill puzzles.
                allPuzzles = playedPuzzles;
                playedPuzzles = [];
            }
            index = Math.round(Math.random() * (allPuzzles.length - 1));
            // Set the current puzzle to this random puzzle.
            currentPuzzle = allPuzzles[index];
            // Add this puzzle to the list of ones already played.
            playedPuzzles.push(allPuzzles[index]);
            // Remove from unplayed puzzle list.
            allPuzzles.splice(index, 1);
        };

        // Fill the sudoku puzzle with clues.
        populateGrid = function(puzzle){
            var clue, $cell, i;
            // empty grid
            for(i = 0; i < puzzle.length; i++){
                $field = $cells.eq(i).find("input");
                $field.val("");
            }
            for(i = 0; i < puzzle.length; i++){
                // Clear cell
                $field = $cells.eq(i).find("input");
                clue = puzzle[i];
                $field.removeAttr("disabled");
                if(!clue) continue;
                $field.val(clue);
                $field.attr("disabled", "true");
            }
        };

        onClickAnotherPuzzle = function(e){
            $message.text("");
            getRandomPuzzle();
            populateGrid(currentPuzzle);
        };

        onClickCheckAnswers = function(e){
            var isCorrect;
            if($fields.filter(function(index, e){
                var val = $(this).val(), 
                num = parseInt(val);
                return val === "" || num < 0 || num > 4;
            }).length > 0) {
               $message.text("The puzzle contains invalid or missing values.");
            } else {
                $message.text("");
            }
            // TODO:Check if the puzzle has been filled in first.
            solution = [];
            $fields.each(function(i, field){
                solution.push(parseInt($(this).val()));
            });
            isCorrect = checkAnswers(solution);
            if(isCorrect){
                $message.text("You have correctly solved this puzzle.");
                waitForNextPuzzle();
            } else {
                $message.text("This puzzle is incorrect.");
            }
        };

        // Check whether the attempt is valid.
        checkAnswers = function(att){
            var attempt = [], rows = [], cols = [], grids = [], root,
            chunks, transpose, gridify, solution = [1,2,3,4],
            allRows = false, allCols = false, allGrids = false;
            attempt = att; // For autocomplete
            root = Math.sqrt(attempt.length);
            // Break up list into sectors of length n.
            chunks = function(n, ls){ 
                if(n <= 1 || n > ls.length) return ls;
                var chunk = [], total = [], i, num;
                num = 0;
                for (i = 0; i < ls.length; i++){
                    chunk.push(ls[i]);
                    num++;
                    if(num >= n){
                        total.push(chunk);
                        chunk = [];
                        num = 0;
                    }
                }
                return total;
            };
            transpose = function(ls){
                var root, rows, result = [], i, j;
                root = Math.sqrt(ls.length);
                rows = chunks(root, ls);
                for(i = 0; i < root; i++){
                    for(j = 0; j < root; j++){
                        result.push(rows[j][i]);
                    }
                }
                return result;
            };
            // Create chunks representing the 4 2x2 squares in this puzzle.
            gridify = function(ls){
                var cubeRoot, total = [], x, _x, y, _y, i, j, list = [];
                list = chunks(4, ls);
                cubeRoot = Math.sqrt(root);
                for(_y = 0; _y < cubeRoot; _y++){
                    for(_x = 0; _x < cubeRoot; _x++){
                        for(x = 0; x < cubeRoot; x++){
                            for(y = 0; y < cubeRoot; y++){
                                i = x + (_x * cubeRoot);
                                j = y + (_y * cubeRoot);
                                total.push(list[i][j]);
                            }
                        }
                    }
                }
                return total;
            };
            compare = function(lhs, rhs){
                var len = lhs.length, i;
                if(len !== rhs.length){
                    return false;
                }
                for(i = 0; i < len; i++){
                    if(lhs[i] !== rhs[i]){
                        return false;
                    }
                }
                return true;
            };
            rows = chunks(root, attempt);
            cols = chunks(root, transpose(attempt));
            grids = chunks(root, gridify(attempt));
            // Check that each column, grid and row enumerates the possible
            // numbers.
            allRows = rows.every(function(e, i, a){
                return compare(e.sort(), solution);
            });
            allCols = cols.every(function(e, i, a){
                return compare(e.sort(), solution);
            });
            allGrids = grids.every(function(e, i, a){
                return compare(e.sort(), solution);
            });

            return allRows && allCols && allGrids;
        };

        startPuzzleResetTimer = function(){
            puzzleResetTimeout = setTimeout(function(){
                startNextPuzzle();
            }, 3500);
        };

        waitForNextPuzzle = function(){
                $fields.each(function(i, field){
                    $(this).attr("disabled", "true");
                    startPuzzleResetTimer();
                });
                deactivateControls(null);
        };

        startNextPuzzle = function(){
                $message.text("");
                getRandomPuzzle();
                populateGrid(currentPuzzle);
                activateControls(null);
        };

        onClickSolvePuzzle = function(){
            deactivateControls("Checking for a solution...");
            $.ajax({
                    type : "POST",
                    url  : "@{SudokuR}",
                    data : JSON.stringify(currentPuzzle), 
                    success : onSolutionReceived,
                    error : function(){
                      activateControls(
                          "The server couldn't provide a solution.");
                    }
            });
        };

        deactivateControls = function(message){
            if(message) $message.text(message);
            $check_answers.unbind();
            $another_puzzle.unbind();
            $solve_puzzle.unbind();
        };

        activateControls = function(message){
            if(message) $message.text(message);
            $another_puzzle.bind("click", onClickAnotherPuzzle);
            $check_answers.bind("click", onClickCheckAnswers);
            $solve_puzzle.bind("click", onClickSolvePuzzle);
        };

        onSolutionReceived = function(data){
            populateGrid(data);
            deactivateControls("The selection monad derived this solution.");
            startPuzzleResetTimer();
        };

        init();

})(jQuery);
